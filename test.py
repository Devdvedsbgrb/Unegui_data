import pandas as pd
import re
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor

# -------------------
# –¢—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü—É—É–¥
# -------------------
def parse_price(price_str):
    if not price_str or pd.isnull(price_str):
        return None
    price_str = str(price_str).replace(",", "").replace("‚ÇÆ", "").strip().lower()
    multiplier = 1
    if "—Å–∞—è" in price_str:
        multiplier = 1_000_000
        price_str = price_str.replace("—Å–∞—è", "").strip()
    elif "—Ç”©–≥—Ä”©–≥" in price_str:
        multiplier = 1
        price_str = price_str.replace("—Ç”©–≥—Ä”©–≥", "").strip()
    match = re.search(r"(\d+(\.\d+)?)", price_str)
    if match:
        return float(match.group(1)) * multiplier
    return None

def parse_area(area_str):
    if not area_str or pd.isnull(area_str):
        return None
    match = re.search(r"(\d+(\.\d+)?)\s*–º[2¬≤]?", str(area_str).lower())
    if match:
        return float(match.group(1))
    return None

def parse_int(value):
    """–¢–µ–∫—Å—Ç—ç—ç—Å –∑”©–≤—Ö”©–Ω —Ç–æ–æ–Ω —É—Ç–≥—ã–≥ –≥–∞—Ä–≥–∞–∂ int –±–æ–ª–≥–æ—Ö"""
    if pd.isnull(value):
        return None
    match = re.search(r"\d+", str(value))
    return int(match.group()) if match else None

# -------------------
# Streamlit –∞–ø–ø
# -------------------
st.title("üè† –û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã “Ø–Ω—ç —Ç–∞–∞–º–∞–≥–ª–∞–≥—á (ML)")

uploaded_file = st.file_uploader("üìÇ CSV —Ñ–∞–π–ª –æ—Ä—É—É–ª–Ω–∞ —É—É", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # “Æ–Ω—ç –±–∞–≥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –æ–ª–æ—Ö
    if "price_numeric" in df.columns:
        pass
    elif "price_text" in df.columns:
        df["price_numeric"] = df["price_text"].apply(parse_price)
    else:
        price_col = None
        for col in df.columns:
            if "“Ø–Ω—ç" in col.lower() or "price" in col.lower():
                price_col = col
                break
        if price_col:
            df["price_numeric"] = df[price_col].apply(parse_price)
        else:
            st.error("‚ö†Ô∏è “Æ–Ω–∏–π–Ω –±–∞–≥–∞–Ω–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π!")
            st.stop()

    # –¢–∞–ª–±–∞–π –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –æ–ª–æ—Ö
    if "area_numeric" in df.columns:
        pass
    elif "–¢–∞–ª–±–∞–π" in df.columns:
        df["area_numeric"] = df["–¢–∞–ª–±–∞–π"].apply(parse_area)
    else:
        st.error("‚ö†Ô∏è –¢–∞–ª–±–∞–π–Ω –±–∞–≥–∞–Ω–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π!")
        st.stop()

    # –¢–æ–æ–Ω –±–æ–ª–≥–æ–∂ –±–æ–ª–æ—Ö –±–∞–≥–∞–Ω—É—É–¥—ã–≥ parse_int –∞—à–∏–≥–ª–∞–∂ —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
    for col in ["–ë–∞—Ä–∏–ª–≥—ã–Ω –¥–∞–≤—Ö–∞—Ä", "–¶–æ–Ω—Ö–Ω—ã —Ç–æ–æ", "–ê—à–∏–≥–ª–∞–ª—Ç–∞–Ω–¥ –æ—Ä—Å–æ–Ω –æ–Ω", "–•—ç–¥—ç–Ω –¥–∞–≤—Ö–∞—Ä—Ç"]:
        if col in df.columns:
            df[col] = df[col].apply(parse_int)

    # –•–æ–æ—Å–æ–Ω —É—Ç–≥—É—É–¥ —Ö–∞—Å–∞—Ö
    df = df.dropna(subset=["price_numeric", "area_numeric"])

    # ML –æ—Ä–æ–ª—Ç, –≥–∞—Ä–∞–ª—Ç
    feature_cols = [
        "district", "–®–∞–ª", "–¢–∞–≥—Ç", "–ê—à–∏–≥–ª–∞–ª—Ç–∞–Ω–¥ –æ—Ä—Å–æ–Ω –æ–Ω", "–ì–∞—Ä–∞–∂",
        "–¶–æ–Ω—Ö", "–ë–∞—Ä–∏–ª–≥—ã–Ω –¥–∞–≤—Ö–∞—Ä", "–•–∞–∞–ª–≥–∞", "area_numeric",
        "–•—ç–¥—ç–Ω –¥–∞–≤—Ö–∞—Ä—Ç", "–¶–æ–Ω—Ö–Ω—ã —Ç–æ–æ", "–ë–∞—Ä–∏–ª–≥—ã–Ω —è–≤—Ü", "–¶–∞—Ö–∏–ª–≥–∞–∞–Ω —à–∞—Ç—Ç–∞–π —ç—Å—ç—Ö"
    ]
    # –ë–∞–π—Ö–≥“Ø–π –±–∞–≥–∞–Ω—É—É–¥—ã–≥ —Ö–∞—Å–∞—Ö
    feature_cols = [col for col in feature_cols if col in df.columns]

    X = df[feature_cols]
    y = df["price_numeric"]

    # –ö–∞—Ç–µ–≥–æ—Ä–∏, —Ç–æ–æ–Ω –±–∞–≥–∞–Ω—É—É–¥ —è–ª–≥–∞—Ö
    categorical_cols = X.select_dtypes(include=["object"]).columns
    numeric_cols = X.select_dtypes(exclude=["object"]).columns

    preprocessor = ColumnTransformer(
        transformers=[
            ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_cols),
            ("num", "passthrough", numeric_cols)
        ]
    )

    # ML pipeline
    model = Pipeline(steps=[
        ("preprocessor", preprocessor),
        ("regressor", RandomForestRegressor(n_estimators=200, random_state=42))
    ])

    # –°—É—Ä–≥–∞–ª—Ç
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model.fit(X_train, y_train)
    score = model.score(X_test, y_test)
    st.info(f"üìä ML –∑–∞–≥–≤–∞—Ä—ã–Ω R¬≤ score: {score:.2f}")

    # -------------------
    # –¢–∞–∞–º–∞–≥–ª–∞–ª —Ö–∏–π—Ö UI
    # -------------------
    st.subheader("üîÆ “Æ–Ω—ç —Ç–∞–∞–º–∞–≥–ª—É—É–ª–∞—Ö")

    input_data = {}
    for col in feature_cols:
        if col in categorical_cols:
            options = list(df[col].dropna().unique())
            input_data[col] = st.selectbox(f"{col}:", options)
        else:
            default_value = int(df[col].dropna().mean()) if not df[col].dropna().empty else 0.0
            input_data[col] = st.number_input(f"{col}:", value=default_value)

    if st.button("üí∞ –¢–∞–∞–º–∞–≥–ª–∞—Ö"):
        prediction = model.predict(pd.DataFrame([input_data]))[0]
        st.success(f"üí∞ ML —Ç–∞–∞–º–∞–≥–ª–∞—Å–∞–Ω “Ø–Ω—ç: {prediction:,.0f} ‚ÇÆ")

else:
    st.warning("üìÇ –≠—Ö–ª—ç—ç–¥ CSV —Ñ–∞–π–ª –æ—Ä—É—É–ª–Ω–∞ —É—É.")
